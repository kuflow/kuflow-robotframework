openapi: 3.0.3

info:
  title: KuFlow Public API
  version: "1.0"
  termsOfService: "https://kuflow.com/legal"
  contact:
    email: kuflow@kuflow.com
  description: |
    # Introduction
    This document contains the KuFlow REST API reference. This API is a fundamental part in the integration of external systems with KuFlow and is used, among others, by the different implementations of the Workers that connect to our network.

    # API Versioning

    A versioning strategy allows our clients to continue using the existing REST API and migrate their applications to the newer API when they are ready.

    The scheme followed is a simplification of *Semver* where only MAJOR versions are differentiated from MINOR or PATCH versions, i.e. a version number of only two levels is used. With this approach, you only have to migrate your applications if you want to upgrade to a MAJOR version of the KuFlow API. In case you want to upgrade to a MINOR version, you can do so without any incompatibility issues.

    The versioning of the api is done through the URI Path, that is, the version number is included in the URI Path. The URL structure would be as follows:

    ```bash
    https://{endpoint}/vMAJOR.MINOR/{api-path}
    ```

    # Idempotency

    The API is designed to support idempotency in order to achieve a correct resilience in the implementation of its clients. The way to achieve this is very simple, in the methods that create resources, you simply have to specify a UUID in the input data and the API will respond by creating or returning the resource if it previously existed. With this mechanism, your systems can implement retry logic without worrying about performing data tradeoffs.

    # OpenAPI Specification

    This API is documented in OpenAPI format. This file allows you to create REST clients with the technology of your choice automatically. In our code repositories you can find an example of this automation using Feign for JAVA.

externalDocs:
  description: Find out more about KuFlow
  url: "https://kuflow.com"

servers:
  - url: "https://api.kuflow.com/v1.0"
    description: Live environment

security:
  - BasicAuth: []

tags:
  - name: task
    description: Operations about task.
    externalDocs:
      description: Find out more about our task.
      url: "https://kuflow.com"

x-tagGroups:
  - name: General
    tags:
      - task

paths:

  /tasks/{id}/~actions/save-element:
    post:
      summary: Save an element
      description: |
        Allow to save an element i.e., a field, a decision, a form, a principal or document.

        In the case of document type elements, this method only allows references to be made to other existing document type
        elements for the purpose of copying that file into the element. To do this you need to pass a reference to the document
        using the 'uri' attribute. In case you want to add a new document, please use the corresponding API method.
        If values already exist for the provided element code, it replaces them with the new ones, otherwise it creates them.
        The values of the previous elements that no longer exist will be deleted.
        To remove an element, use the appropriate API method.
      operationId: actionsSaveElement
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskElementValueOrArrayValue"
      responses:
        "200":
          description: Task with element filled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}/~actions/save-element-value-document:
    post:
      summary: Save an element document
      description: |
        Allow to save an element document uploading the content.

        If it is a multiple element, and the Id referenced in the body does not exist or is empty, the document will be added to the element.
        If the element already exists (the Id referenced in the body corresponds to an existing one), it updates it.
      operationId: actionsSaveElementValueDocument
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                json:
                  $ref: "#/components/schemas/SaveElementValueDocumentCommand"
                file:
                  type: string
                  format: binary
              required:
                - json
                - file
          #  encoding:
          #    file:
          #      contentType: image/*, application/pdf
      responses:
        "200":
          description: Task with element filled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}/~actions/delete-element:
    post:
      summary: Delete an element by code
      description: |
        Allow to delete task element by specifying the item definition code.

        Remove all the element values.
      operationId: actionsDeleteElement
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteElementCommand"
      responses:
        "200":
          description: Task elements deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}/~actions/delete-element-value-document:
    post:
      summary: Delete an element document value
      description: |
        Allow to delete a specific document from an element of document type using its id.

        Note: If it is a multiple item, it will only delete the specified document. If it is a single element, in addition to the document, it will also delete the element.
      operationId: actionsDeleteValueDocument
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteElementValueDocumentCommand"
      responses:
        "200":
          description: Task elements deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}/~actions/append-log:
    post:
      summary: Append a log to the task
      description: A log entry is added to the task. If the number of log entries is reached, the oldest log entry is removed.
      operationId: actionsAppendLog
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Log"
      responses:
        "200":
          description: Log entry added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

components:
  parameters:
    IdPathParam:
      name: id
      in: path
      description: The resource Id
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    DefaultError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        message:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/DefaultErrorInfo"
      required:
        - timestamp
        - status
        - message

    DefaultErrorInfo:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        location:
          type: string
        locationType:
          type: string
      required:
        - code
        - message

    AbstractAudited:
      type: object
      properties:
        createdBy:
          type: string
          format: uuid
          description: Who create this model
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: When this model was created
          readOnly: true
        lastModifiedBy:
          type: string
          format: uuid
          description: Who was last update this model
          readOnly: true
        lastModifiedAt:
          type: string
          format: date-time
          description: When this model type was last updated.
          readOnly: true

    TaskState:
      type: string
      enum:
        - READY
        - CLAIMED
        - COMPLETED
        - CANCELLED

    TaskElementValueOrArrayValue:
      type: object
      properties:
        code:
          type: string
        value:
          oneOf:
            - $ref: "#/components/schemas/TaskElementValue"
            - type: array
              items:
                $ref: "#/components/schemas/TaskElementValue"
      required:
        - code

    TaskElementValueType:
      type: string
      enum:
        - STRING
        - NUMBER
        - OBJECT
        - DOCUMENT
        - PRINCIPAL

    TaskElementValue:
      type: object
      properties:
        valid:
          type: boolean
          default: true
        type:
          $ref: "#/components/schemas/TaskElementValueType"
      discriminator:
        propertyName: type
        mapping:
          "STRING": "#/components/schemas/TaskElementValueString"
          "NUMBER": "#/components/schemas/TaskElementValueNumber"
          "OBJECT": "#/components/schemas/TaskElementValueObject"
          "DOCUMENT": "#/components/schemas/TaskElementValueDocument"
          "PRINCIPAL": "#/components/schemas/TaskElementValuePrincipal"
      required:
        - type

    TaskElementValueString:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              type: string

    TaskElementValueNumber:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              type: number
              format: double

    TaskElementValueObject:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              type: object
              additionalProperties: true

    TaskElementValueDocument:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              $ref: "#/components/schemas/TaskElementValueDocumentItem"

    TaskElementValuePrincipal:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              $ref: "#/components/schemas/TaskElementValuePrincipalItem"

    TaskElementValueDocumentItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        uri:
          type: string
        name:
          type: string
        contentPath:
          type: string
        contentType:
          type: string
        contentLength:
          type: integer
          format: int64

    TaskElementValuePrincipalItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/PrincipalType"
        name:
          type: string
      required:
        - id
        - type

    SaveElementValueDocumentCommand:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        valid:
          type: boolean
          default: true
      required:
        - code

    Task:
      allOf:
        - $ref: "#/components/schemas/AbstractAudited"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            state:
              readOnly: true
              allOf:
                - $ref: "#/components/schemas/TaskState"
            taskDefinition:
              $ref: "#/components/schemas/TasksDefinitionSummary"
            processId:
              type: string
              format: uuid
            activityToken:
              type: string
              description: When create a Kuflow Task backed with a Temporal.io servers, this value is required and must be set with the context task token of Temporal.io activity
            activityResponseVersion:
              type: string
              description: When create a Kuflow Task backed with a Temporal.io servers, this value is required and must be set with the activity version response.
            elementValues:
              type: object
              description: An ElementValueDocument or an array of ElementValueDocument is not allowed in any type of requests
              additionalProperties:
                oneOf:
                  - $ref: "#/components/schemas/TaskElementValue"
                  - type: array
                    items:
                      $ref: "#/components/schemas/TaskElementValue"
            logs:
              type: array
              readOnly: true
              items:
                $ref: "#/components/schemas/Log"
            owner:
              allOf:
                - $ref: "#/components/schemas/Principal"
          required:
            - taskDefinition
            - processId

    TasksDefinitionSummary:
      type: object
      description: In creation task, one of 'id, version or code' is mandatory
      properties:
        id:
          type: string
          format: uuid
        version:
          type: string
          format: uuid
        code:
          type: string
        name:
          type: string
          minLength: 1
          maxLength: 50
          readOnly: true

    LogLevel:
      type: string
      enum:
        - INFO
        - WARN
        - ERROR

    Log:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          description: When this model was created
          readOnly: true
        message:
          type: string
        level:
          $ref: "#/components/schemas/LogLevel"
      required:
        - message
        - level

    Principal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/PrincipalType"
        name:
          type: string
      required:
        - id
        - type

    PrincipalType:
      type: string
      enum:
        - USER
        - APPLICATION
        - SYSTEM

    DeleteElementCommand:
      type: object
      properties:
        code:
          description: Code of task element to delete
          type: string
      required:
        - code

    DeleteElementValueDocumentCommand:
      type: object
      properties:
        documentId:
          description: Document Id to delete
          type: string
          format: uuid
      required:
        - documentId

  responses:
    DefaultError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultError"

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
