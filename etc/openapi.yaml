openapi: 3.0.3

info:
  title: KuFlow Public API
  version: "1.0"
  termsOfService: "https://kuflow.com/legal"
  contact:
    email: kuflow@kuflow.com
  description: |
    # Introduction
    This document contains the KuFlow REST API reference. This API is a fundamental part in the integration of external systems with KuFlow and is used, among others, by the different implementations of the Workers that connect to our network.

    # API Versioning

    A versioning strategy allows our clients to continue using the existing REST API and migrate their applications to the newer API when they are ready.

    The scheme followed is a simplification of *Semver* where only MAJOR versions are differentiated from MINOR or PATCH versions, i.e. a version number of only two levels is used. With this approach, you only have to migrate your applications if you want to upgrade to a MAJOR version of the KuFlow API. In case you want to upgrade to a MINOR version, you can do so without any incompatibility issues.

    The versioning of the api is done through the URI Path, that is, the version number is included in the URI Path. The URL structure would be as follows:

    ```bash
    https://{endpoint}/vMAJOR.MINOR/{api-path}
    ```

    # Idempotency

    The API is designed to support idempotency in order to achieve a correct resilience in the implementation of its clients. The way to achieve this is very simple, in the methods that create resources, you simply have to specify a UUID in the input data and the API will respond by creating or returning the resource if it previously existed. With this mechanism, your systems can implement retry logic without worrying about performing data tradeoffs.

    # OpenAPI Specification

    This API is documented in OpenAPI format. This file allows you to create REST clients with the technology of your choice automatically. In our code repositories you can find an example of this automation using Feign for JAVA.

externalDocs:
  description: Find out more about KuFlow
  url: "https://kuflow.com"

servers:
  - url: "https://api.kuflow.com/v1.0"
    description: Live environment

security:
  - BasicAuth: []

tags:
  - name: process
    description: Operations about process
    externalDocs:
      description: Find out more about our processes.
      url: "https://kuflow.com"
  - name: task
    description: Operations about task.
    externalDocs:
      description: Find out more about our task.
      url: "https://kuflow.com"
  - name: webhook
    description: Operations that Kuflow invokes towards external systems.
  - name: authentication
    description: Operations for handling authentication tokens.

x-tagGroups:
  - name: General
    tags:
      - process
      - task
  - name: Notification
    tags:
      - webhook
  - name: Authentication management
    tags:
      - authentication

paths:
  /authentications:
    post:
      summary: Create an authentication for the current principal
      operationId: createAuthentication
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authentication"
      responses:
        "200":
          description: Authentication Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authentication"
        default:
          $ref: "#/components/responses/DefaultError"

  /processes:
    get:
      summary: Find all accessible Processes
      description: List all the Processes that have been created and the the credentials has access.
      operationId: findProcesses
      tags:
        - process
      parameters:
        - $ref: "#/components/parameters/SizeQueryParam"
        - $ref: "#/components/parameters/PageQueryParam"
      responses:
        "200":
          description: Processes found paginated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessPage"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      summary: Create a new process
      description: |
        Creates a process. This option has direct correspondence to the action of starting a process in the Kuflow GUI.

        If you want the method to be idempotent, please specify the `id` field in the request body.
      operationId: createProcess
      tags:
        - process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Process"
      responses:
        "200":
          description: Process already created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Process"
        "201":
          description: Process created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Process"
        default:
          $ref: "#/components/responses/DefaultError"

  /processes/{id}:
    get:
      summary: Get a Process by Id
      description: Returns the requested Process when has access to do it.
      operationId: retrieveProcess
      tags:
        - process
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Process"
        default:
          $ref: "#/components/responses/DefaultError"

  /processes/{id}/~actions/complete:
    post:
      summary: Complete a Process
      description: |
        Complete a Process. The state of Process is setted to completed.

        If you are already in this state, no action is taken.
      operationId: actionsCompleteProcess
      tags:
        - process
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      responses:
        "200":
          description: Process completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Process"
        default:
          $ref: "#/components/responses/DefaultError"

  /processes/{id}/~actions/cancel:
    post:
      summary: Cancel a Process
      description: |
        Cancel a Process. The state of Process is setted to canceled.
        All the active tasks will be marked as canceled too.

        If you are already in this state, no action is taken.
      operationId: actionsCancelProcess
      tags:
        - process
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      responses:
        "200":
          description: Process cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Process"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks:
    get:
      summary: Find all accessible Taks
      description: List all Tasks that have been created and the the credentials has access.
      operationId: findTasks
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/SizeQueryParam"
        - $ref: "#/components/parameters/PageQueryParam"
        - name: processId
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: state
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TaskState"

      responses:
        "200":
          description: Tasks found paginated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskPage"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      summary: Create a new Task in the selected Process
      description: |
        Create a Task and optionally fill its elements. We can fill in any type of element except documents.
        If you want to add document type elements, then use the appropriate API method.
        If you pass a valid owner then the task will be claimed for it.

        If you want the method to be idempotent, please specify the `id` field in the request body.
      operationId: createTask
      tags:
        - task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
            examples:
              example-one:
                summary: task with elements
                value:
                  {
                    "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                    "taskDefinition": { "code": "string" },
                    "processId": "9e0ad09b-5150-48c0-aded-707587048fd9",
                    "activityToken": "string",
                    "activityResponseVersion": "string",
                    "elementValues":
                      {
                        "element_code_1": { "value": "string" },
                        "element_code_2": { "valid": false, "value": 1111 },
                        "element_code_3": [{ "value": "string" }, { "value": "string" }],
                        "element_code_4": { "value": { "form_field_1": "string", "form_field_2": "string" } },
                        "element_code_5": { "value": { "id": "string", name: "", contentPath: "", contentType: "", contentLength: "" } },
                        "element_code_6":
                          [{ "value": { "value": { "id": "string", name: "", contentPath: "", contentType: "", contentLength: "" } } }],
                        "element_code_7": { "value": { "id": "b90c9ae9-444c-4bfd-9594-7468955d2eda", "type": "USER" } },
                        "element_code_8":
                          [
                            { "value": { "id": "b90c9ae9-444c-4bfd-9594-7468955d2eda", "type": "USER" } },
                            { "value": { "id": "f4be313c-c0a2-426c-bdd3-c3113d7bbf37", "type": "USER" } },
                          ],
                      },
                  }
      responses:
        "200":
          description: Task already created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "201":
          description: Task created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}:
    get:
      summary: Get a task given it Id
      description: Allow to get a task by Id.
      operationId: retrieveTask
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      responses:
        "200":
          description: Task requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}/~actions/claim:
    post:
      summary: Claim a task
      description: Allow to claim a task.
      operationId: actionsClaimTask
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      responses:
        "200":
          description: Task claimed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}/~actions/assign:
    post:
      summary: Assign a task
      description: Allow to assign a task to a user or application. Only one option will be necessary.
      operationId: actionsAssignTask
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignTaskCommand"
      responses:
        "200":
          description: Task assigned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}/~actions/save-element:
    post:
      summary: Save an element
      description: |
        Allow to save an element i.e., a field, a decision, a form, a principal or document.

        If is a document you need to pass a document reference using the 'id' attribute.
        If values already exist for the provided element code, it replaces them with the new ones, otherwise it creates them.
        The values of the previous elements that no longer exist will be deleted.
        To remove an element, use the appropriate API method.
      operationId: actionsSaveElement
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskElementValueOrArrayValue"
      responses:
        "200":
          description: Task with element filled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}/~actions/save-element-value-document:
    post:
      summary: Save an element document
      description: |
        Allow to save an element document uploading the content.

        If it is a multiple element, and the Id referenced in the body does not exist or is empty, the document will be added to the element.
        If the element already exists (the Id referenced in the body corresponds to an existing one), it updates it.
      operationId: actionsSaveElementValueDocument
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                json:
                  $ref: "#/components/schemas/SaveElementValueDocumentCommand"
                file:
                  type: string
                  format: binary
              required:
                - json
                - file
            encoding:
              file:
                contentType: image/*, application/pdf
      responses:
        "200":
          description: Task with element filled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}/~actions/delete-element:
    post:
      summary: Delete an element by code
      description: |
        Allow to delete task element by specifying the item definition code.

        Remove all the element values.
      operationId: actionsDeleteElement
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteElementCommand"
      responses:
        "200":
          description: Task elements deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}/~actions/delete-element-value-document:
    post:
      summary: Delete an element document value
      description: |
        Allow to delete a specific document from an element of document type using its id.

        Note: If it is a multiple item, it will only delete the specified document. If it is a single element, in addition to the document, it will also delete the element.
      operationId: actionsDeleteValueDocument
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteElementValueDocumentCommand"
      responses:
        "200":
          description: Task elements deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/DefaultError"

  /tasks/{id}/~actions/download-element-value-document:
    get:
      summary: Download document
      description: Given a task, download a document from an element of document type
      operationId: actionsDownloadElementValueDocument
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
        - name: documentId
          in: query
          description: Document Id to download.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Document requested
          content:
            "*/*":
              schema:
                type: string
                format: binary

  /tasks/{id}/~actions/complete:
    post:
      summary: Complete a task
      description: |
        Allow to complete a claimed task by the principal
      operationId: actionsCompleteTask
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      responses:
        "200":
          description: Task completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}/~actions/append-log:
    post:
      summary: Append a log to the task
      description: A log entry is added to the task. If the number of log entries is reached, the oldest log entry is removed.
      operationId: actionsAppendLog
      tags:
        - task
      parameters:
        - $ref: "#/components/parameters/IdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Log"
      responses:
        "200":
          description: Log entry added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

x-webhooks:
  events:
    post:
      summary: Event sent
      description: Information about a event produced in the platform
      operationId: handleWebhookEvent
      tags:
        - webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully

components:
  parameters:
    IdPathParam:
      name: id
      in: path
      description: The resource Id
      required: true
      schema:
        type: string
        format: uuid
    SizeQueryParam:
      name: size
      in: query
      description: The number of records returned within a single API call.
      required: false
      schema:
        type: integer
        default: 25
        minimum: 0
        maximum: 1000
    PageQueryParam:
      name: page
      in: query
      description: The page number of the current page in the returned records, 0 is the first page
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0

  schemas:
    DefaultError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        message:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/DefaultErrorInfo"
      required:
        - timestamp
        - status
        - message

    DefaultErrorInfo:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        location:
          type: string
        locationType:
          type: string
      required:
        - code
        - message

    WebhookEventProcessStateChangedData:
      type: object
      properties:
        processId:
          type: string
          format: uuid
        processState:
          $ref: "#/components/schemas/ProcessState"
      required:
        - processId
        - processState

    WebhookEventTaskStateChangedData:
      type: object
      properties:
        processId:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        taskCode:
          type: string
        taskState:
          $ref: "#/components/schemas/TaskState"
      required:
        - processId
        - taskId
        - taskCode
        - taskState

    WebhookEventProcessStateChanged:
      description: Process Events
      allOf:
        - $ref: "#/components/schemas/WebhookEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/WebhookEventProcessStateChangedData"
          required:
            - data

    WebhookEventTaskStateChanged:
      description: Process Events
      allOf:
        - $ref: "#/components/schemas/WebhookEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/WebhookEventTaskStateChangedData"
          required:
            - data

    WebhookType:
      description: Type of the Event
      type: string
      enum:
        - PROCESS.STATE_CHANGED
        - TASK.STATE_CHANGED
      x-enum-varnames:
        - PROCESS__STATE_CHANGED
        - TASK__STATE_CHANGED

    WebhookEvent:
      type: object
      discriminator:
        propertyName: type
        mapping:
          "PROCESS.STATE_CHANGED": "#/components/schemas/WebhookEventProcessStateChanged"
          "TASK.STATE_CHANGED": "#/components/schemas/WebhookEventTaskStateChanged"
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/WebhookType"
        timestamp:
          type: string
          format: date-time
      required:
        - id
        - type
        - timestamp

    AbstractAudited:
      type: object
      properties:
        createdBy:
          type: string
          format: uuid
          description: Who create this model
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: When this model was created
          readOnly: true
        lastModifiedBy:
          type: string
          format: uuid
          description: Who was last update this model
          readOnly: true
        lastModifiedAt:
          type: string
          format: date-time
          description: When this model type was last updated.
          readOnly: true

    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          minimum: 0
          example: 25
        number:
          type: integer
          minimum: 0
          example: 0
        totalElements:
          type: integer
          format: int64
          example: 1096
        totalPages:
          type: integer
          example: 110
      required:
        - size
        - number
        - totalElements
        - totalPages

    Page:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageMetadata"
      required:
        - page

    AuthenticationType:
      type: string
      enum:
        - ENGINE

    Authentication:
      allOf:
        - $ref: "#/components/schemas/AbstractAudited"
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            type:
              $ref: "#/components/schemas/AuthenticationType"
            token:
              type: string
              readOnly: true
            expiredAt:
              type: string
              format: date-time
              readOnly: true

    ProcessState:
      type: string
      enum:
        - RUNNING
        - COMPLETED
        - CANCELLED

    TaskState:
      type: string
      enum:
        - READY
        - CLAIMED
        - COMPLETED
        - CANCELLED

    ProcessElementValueType:
      type: string
      enum:
        - STRING
        - NUMBER

    ProcessElementValue: # // TODO REFACTOR THIS ALSO
      type: object
      properties:
        valid:
          type: boolean
          default: true
        type:
          $ref: "#/components/schemas/ProcessElementValueType"
        value:
          type: object # // TODO CAN WE DO THIS ??
      discriminator:
        propertyName: type
        mapping:
          "STRING": "#/components/schemas/ProcessElementValueString"
          "NUMBER": "#/components/schemas/ProcessElementValueNumber"
      required:
        - type

    ProcessElementValueString:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              type: string

    ProcessElementValueNumber:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              type: number
              format: double

    TaskElementValueOrArrayValue:
      type: object
      properties:
        code:
          type: string
        value:
          oneOf:
            - $ref: "#/components/schemas/TaskElementValue"
            - type: array
              items:
                $ref: "#/components/schemas/TaskElementValue"
      required:
        - code

    TaskElementValueType:
      type: string
      enum:
        - STRING
        - NUMBER
        - OBJECT
        - DOCUMENT
        - PRINCIPAL

    TaskElementValue:
      type: object
      properties:
        valid:
          type: boolean
          default: true
        type:
          $ref: "#/components/schemas/TaskElementValueType"
        value:
          type: object # // TODO CAN WE DO THIS ??
      discriminator:
        propertyName: type
        mapping:
          "STRING": "#/components/schemas/TaskElementValueString"
          "NUMBER": "#/components/schemas/TaskElementValueNumber"
          "OBJECT": "#/components/schemas/TaskElementValueObject"
          "DOCUMENT": "#/components/schemas/TaskElementValueDocument"
          "PRINCIPAL": "#/components/schemas/TaskElementValuePrincipal"
      required:
        - type

    TaskElementValueString:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              type: string

    TaskElementValueNumber:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              type: number
              format: double

    TaskElementValueObject:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              type: object
              additionalProperties: true

    TaskElementValueDocument:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              $ref: "#/components/schemas/TaskElementValueDocumentItem"

    TaskElementValuePrincipal:
      allOf:
        - $ref: "#/components/schemas/TaskElementValue"
        - type: object
          properties:
            value:
              $ref: "#/components/schemas/TaskElementValuePrincipalItem"

    TaskElementValueDocumentItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentPath:
          type: string
        contentType:
          type: string
        contentLength:
          type: integer
          format: int64

    TaskElementValuePrincipalItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/PrincipalType"
        name:
          type: string
      required:
        - id
        - type

    SaveElementValueDocumentCommand:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        valid:
          type: boolean
          default: true
      required:
        - code

    ProcessDefinitionSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 50
          readOnly: true
      required:
        - id

    Process:
      allOf:
        - $ref: "#/components/schemas/AbstractAudited"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            subject:
              type: string
              minLength: 1
              maxLength: 255
            state:
              readOnly: true
              allOf:
                - $ref: "#/components/schemas/ProcessState"
            processDefinition:
              $ref: "#/components/schemas/ProcessDefinitionSummary"
            elementValues:
              type: object
              additionalProperties:
                oneOf:
                  - $ref: "#/components/schemas/ProcessElementValue"
            initiator:
              readOnly: true
              allOf:
                - $ref: "#/components/schemas/Principal"
          required:
            - processDefinition

    ProcessPage:
      allOf:
        - $ref: "#/components/schemas/Page"
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/Process"
          required:
            - content

    Task:
      allOf:
        - $ref: "#/components/schemas/AbstractAudited"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            state:
              readOnly: true
              allOf:
                - $ref: "#/components/schemas/TaskState"
            taskDefinition:
              $ref: "#/components/schemas/TasksDefinitionSummary"
            processId:
              type: string
              format: uuid
            activityToken:
              type: string
              description: When create a Kuflow Task backed with a Temporal.io servers, this value is required and must be set with the context task token of Temporal.io activity
            activityResponseVersion:
              type: string
              description: When create a Kuflow Task backed with a Temporal.io servers, this value is required and must be set with the activity version response.
            elementValues:
              type: object
              description: An ElementValueDocument or an array of ElementValueDocument is not allowed in any type of requests
              additionalProperties:
                oneOf:
                  - $ref: "#/components/schemas/TaskElementValue"
                  - type: array
                    items:
                      $ref: "#/components/schemas/TaskElementValue"
            logs:
              type: array
              readOnly: true
              items:
                $ref: "#/components/schemas/Log"
            owner:
              allOf:
                - $ref: "#/components/schemas/Principal"
          required:
            - taskDefinition
            - processId

    TasksDefinitionSummary:
      type: object
      description: In creation task, one of 'id, version or code' is mandatory
      properties:
        id:
          type: string
          format: uuid
        version:
          type: string
          format: uuid
        code:
          type: string
        name:
          type: string
          minLength: 1
          maxLength: 50
          readOnly: true

    TaskPage:
      allOf:
        - $ref: "#/components/schemas/Page"
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/Task"
          required:
            - content

    LogLevel:
      type: string
      enum:
        - INFO
        - WARN
        - ERROR

    Log:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          description: When this model was created
          readOnly: true
        message:
          type: string
        level:
          $ref: "#/components/schemas/LogLevel"
      required:
        - message
        - level

    Principal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/PrincipalType"
        name:
          type: string
      required:
        - id
        - type

    PrincipalType:
      type: string
      enum:
        - USER
        - APPLICATION
        - SYSTEM

    DeleteElementCommand:
      type: object
      properties:
        code:
          description: Code of task element to delete
          type: string
      required:
        - code

    DeleteElementValueDocumentCommand:
      type: object
      properties:
        documentId:
          description: Document Id to delete
          type: string
      required:
        - documentId

    AssignTaskCommand:
      type: object
      description: Command to assign task, only one option is required.
      properties:
        principalId:
          type: string
          format: uuid
        email:
          type: string
          format: email

  responses:
    DefaultError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultError"

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
